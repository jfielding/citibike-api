/*
 * Citibike demo API
 *
 * API for the Citibike Demo
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    { 
        /// <summary>
        /// creates a station
        /// </summary>
        /// <remarks>Adds an item to the system</remarks>
        /// <param name="body">Station to add</param>
        /// <response code="201">station created</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">an existing item already exists</response>
        [HttpPost]
        [Route("/Snowflake5/Citibike/1.0.0/stations")]
        [ValidateModelState]
        [SwaggerOperation("AddStation")]
        public virtual IActionResult AddStation([FromBody]StationItem body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }

        /// <summary>
        /// searches stations
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available stations in the system </remarks>
        /// <param name="searchString">pass an optional search string for looking up station names</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Snowflake5/Citibike/1.0.0/stations")]
        [ValidateModelState]
        [SwaggerOperation("SearchInventory")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StationItem>), description: "search results matching criteria")]
        public virtual IActionResult SearchInventory([FromQuery]string searchString)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StationItem>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n}, {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StationItem>>(exampleJson)
                        : default(List<StationItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stationId">ID of station</param>
        /// <response code="200">search results matching criteria</response>
        [HttpDelete]
        [Route("/Snowflake5/Citibike/1.0.0/stations/{stationId}")]
        [ValidateModelState]
        [SwaggerOperation("StationsStationIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StationItem>), description: "search results matching criteria")]
        public virtual IActionResult StationsStationIdDelete([FromRoute][Required]long? stationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StationItem>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n}, {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StationItem>>(exampleJson)
                        : default(List<StationItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stationId">ID of station</param>
        /// <response code="200">search results matching criteria</response>
        [HttpGet]
        [Route("/Snowflake5/Citibike/1.0.0/stations/{stationId}")]
        [ValidateModelState]
        [SwaggerOperation("StationsStationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(StationItem), description: "search results matching criteria")]
        public virtual IActionResult StationsStationIdGet([FromRoute][Required]long? stationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StationItem));
            string exampleJson = null;
            exampleJson = "{\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StationItem>(exampleJson)
                        : default(StationItem);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stationId">ID of station</param>
        /// <response code="200">search results matching criteria</response>
        [HttpPut]
        [Route("/Snowflake5/Citibike/1.0.0/stations/{stationId}")]
        [ValidateModelState]
        [SwaggerOperation("StationsStationIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StationItem>), description: "search results matching criteria")]
        public virtual IActionResult StationsStationIdPut([FromRoute][Required]long? stationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StationItem>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n}, {\n  \"latitude\" : 40.761636025,\n  \"name\" : \"W 49 St & 8 Ave\",\n  \"comment\" : \"Bike station at W 49 St & 8 Ave\",\n  \"id\" : 450.0,\n  \"longitude\" : -73.988441025\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StationItem>>(exampleJson)
                        : default(List<StationItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
